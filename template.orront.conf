########################################################################################
#
# Template to create configuration file to be used by the ORR system at runtime.
#
# The ${?...} substitution syntax (note the question mark) allows to override settings
# via environment variables. For example, the following under the `mongo` section:
#   host = localhost
#   host = ${?MONGO_HOST}
# indicates that the default value for Mongo host ("localhost") will be overridden with
# the value of the environment variable `MONGO_HOST` if defined.
# See https://github.com/typesafehub/config#optional-system-or-env-variable-overrides
#
# The ${...} substitution syntax (note, *no* question mark) allows to resolve a value
# by taking it from another configuration entry. For example, in
#   replyTo = ${email.account.username}
# the value for `replyTo` will the value assigned to `email.account.username`.
# See https://github.com/typesafehub/config#uses-of-substitutions
#
########################################################################################


# --------------------------------------------------------------------------------------------------
# There will be an "admin" user automatically created upon initial start of the ORR.
# This user will have all provileges on your ORR instance.
admin {
  # password is required:
  password = "admin"
  password = ${?ADMIN_PASSWORD}

  # email is required:
  email    = "admin@example.org"
  email    = ${?ADMIN_EMAIL}

  # optional: comma-separated list of additional usernames that will be granted "admin"
  # privileges right upon corresponding account creation
  #extra    = "jdoe, foobar"
}


# --------------------------------------------------------------------------------------------------
# MongoDB
mongo {
  host = "localhost"
  host = ${?MONGO_HOST}

  port = 27017
  port = ${?MONGO_PORT}

  db   = "orr-ont"
  db   = ${?MONGO_DB_NAME}
}


# --------------------------------------------------------------------------------------------------
# files: managed file locations
files {
  # base directory for all managed data
  baseDirectory = "/opt/orr-ont-base-directory"
  baseDirectory = ${?ORR_ONT_BASE_DIR}
}


# --------------------------------------------------------------------------------------------------
# AllegroGraph server (which supports the triple store and SPARQL endpoint)
agraph {
  host = "localhost"
  host = ${?AGRAPH_HOST}

  port = 10035
  port = ${?AGRAPH_PORT}

  userName = "test"
  userName = ${?AGRAPH_USERNAME}

  password = "xyzzy"
  password = ${?AGRAPH_PASSWORD}

  repoName  = "mmiorr"
  repoName = ${?AGRAPH_REPO_NAME}

  sparqlEndpoint = "http://"${agraph.host}":"${agraph.port}/repositories/${agraph.repoName}
}


# --------------------------------------------------------------------------------------------------
# branding: Note that most of the "branding" is actually done on the front-end side (orr-portal),
# but we need some pieces here mainly because of the emails that are sent to users.
# See also email section below.
branding {
  # instanceName: used in email messages and other places.
  instanceName = "My ORR"
}


# --------------------------------------------------------------------------------------------------
# (Required) email related information used for user account management and notifications.
email {
  # account used for sending emails
  account {
    username = "my.orr.instance@gmail.com"
    password = "thepassword"
  }

  # email server parameters
  server {
    host = "smtp.gmail.com"
    port = 465
    prot = "smtps"
    debug = false
  }

  # info used to compose emails (when user resets password; notifications about registrations, etc):
  from    = ${branding.instanceName}" <"${email.account.username}">"
  replyTo = ${email.account.username}
  mailer  = ${branding.instanceName}
}


# --------------------------------------------------------------------------------------------------
# recaptcha: optional but highly recommended
# See https://www.google.com/recaptcha/intro/index.html
recaptcha {
  # If defined, the backend will validate recaptcha information provided by the user via request from front-end
  #privateKey = "--your google recaptcha secret key--"
}

# --------------------------------------------------------------------------------------------------
# googleAnalytics property ID: optional
googleAnalytics {
  #propertyId = "UA-XXXXX-Y"
}

# --------------------------------------------------------------------------------------------------
# Required: Firebase application secret (https://www.firebase.com/docs/web/guide/login/custom.html)
# NOTE: This dependency is planned to be removed, see https://github.com/mmisw/orr-ont/issues/25.
# In the mean time, please contact us if this is preventing you from moving forward with your ORR instance.
firebase {
  secret = "?"
}
